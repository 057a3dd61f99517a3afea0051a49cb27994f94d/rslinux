#!/usr/bin/env perl

#   Copyright Â© 2018-2022 Yang Bo
#
#   This file is part of RSLinux.
#
#   RSLinux is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   RSLinux is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with RSLinux.  If not, see <http://www.gnu.org/licenses/>.

use App::rs 'sane',
    iautoload => ['App::rs',
		  ['Term::ANSIColor', [qw/colored c/]],
		  [qw/Cwd abs_path getcwd/],
		  [qw/File::Path make_path/],
		  [qw/File::Temp tempfile/],
		  [qw/Scalar::Util looks_like_number/],
		  ['List::Util', map { "&$_" } qw/reduce all first none pairmap/],
		  ['Fcntl', map { "&$_" } qw/S_IFMT S_IFLNK S_IFREG S_IFDIR/],
		  [qw/Config %Config/]];

BEGIN {
	for my $c (qw/green cyan yellow magenta red/) {
		no strict 'refs';
		my $f = uc substr $c, 0, 1;
		*$f = sub () { [$c] };
		*{$f x 2} = sub () { ['bold', $c] };
	}
}
sub set {
	my ($f, $m) = @_;
	# chown should be called before chmod to prevent setuid, setgid bit gets reset.
	chown @$m{qw/uid gid/}, $f and chmod $m->{mode} & 07777, $f and utimensat($f, $m->{mtime}) or die "$f: $!";
}
sub equiv {
	my ($p, $q) = @_;
	no warnings 'uninitialized';
	all { $p->{$_} eq $q->{$_} } qw/mode uid gid size mtime hl sl/;
}
sub equivnohl {
	my ($p, $q) = @_;
	no warnings 'uninitialized';
	all { $p->{$_} eq $q->{$_} } qw/mode uid gid size mtime sl/
	    and $p->{hl} ne $q->{hl};
}
sub elf {
	open my $fh, '<', shift or die $!;
	my $b;
	read($fh, $b, 4) == 4 and $b eq "\x7fELF";
}
sub _diff {
	my ($cp, $vp) = @_;
	my ($db, $v) = ($vp->{db}, {});
	opendir(my $dh, $cp->{root} . $vp->{d}) or die $!;
	for (sort readdir $dh) {
		my $ign = $vp->{ign}{$_};
		# ignore leaf only.
		next if /^\.{1,2}$/ or $ign and not ref $ign;
		my ($r, $m) = ($vp->{d} . $_, {});
		my $f = $cp->{root} . $r;
		(my $i, @$m{qw/mode uid gid size mtime/}) = (lstat $f)[1, 2, 4, 5, 7, 9];
		if ($cp->{ih}{$i})	{ $m->{hl} = $cp->{ih}{$i} }
		else			{ $cp->{ih}{$i} = $r }
		my $t = $m->{mode} & S_IFMT;
		if ($t == S_IFDIR)	{ delete $m->{size} }
		elsif ($t == S_IFLNK)	{ $m->{sl} = readlink $f or die $! }
		elsif ($t != S_IFREG)	{ die "unknown type $t of $f." }
		my $st = {};
		if (my $_m = $db->{$_}) {
			my $_t = $_m->{mode} & S_IFMT;
			if ($t == S_IFDIR xor $_t == S_IFDIR)	{ ... }
			elsif ($t == S_IFDIR)			{ $st->{dir} = 1 }
			else {
				if (not equiv($m, $_m)) {
					if ($cp->{relink} and equivnohl($m, $_m)) {
						my $old = $cp->{root} . $_m->{hl};
						say c(YY, "Linking $f -> $old");
						unlink $f and
						    link $old, $f or die $!;
					} else {
						$st->{mod} = 1;
					}
				}
			}
		} else {
			$st->{ne} = 1;
		}
		if (%$st) {
			if ($t == S_IFDIR) {
				add(my $p = $db->{$_} ||= {c => {}}, %$m);
				my $c = _diff($cp, {db => $p->{c},
						    ign => $vp->{ign}{$_},
						    d => $r . '/'});
				if ($st->{ne} or %$c) {
					$v->{$_} = {%$m,
						    c => $c};
					$p->{owner}{$cp->{oid}} = $cp->{ts};
				}
			} else {
				my $n = 1 if $t == S_IFREG and not $m->{hl};
				strip($f, $m) if $n and $cp->{wet};
				my $p = $db->{$_} = {%$m,
						     owner => $db->{$_}{owner}};
				$p->{owner}{current} = $cp->{oid}, $p->{owner}{record}{$cp->{oid}} = $cp->{ts};
				$v->{$_} = {%$m};
				$v->{$_}{c} = \$f if $n;
			}
		}
	}
	$v;
}
sub _patch {
	my ($cp, $vp) = @_;
	my ($db, $v) = @$vp{qw/db v/};
	for (sort keys %$v) {
		my ($r, $q) = ($vp->{d} . $_, $v->{$_});
		my $f = $cp->{root} . $r;
		# That's for historical reasons...
		my $t = $q->{sl} ? S_IFLNK : $q->{mode} & S_IFMT;
		if ($t == S_IFDIR) {
			if (not $db->{$_}) {
				mkdir $f or die "mkdir $f: $!" if $cp->{wet} and not -d $f;
				$db->{$_} = {%$q,
					     c => {}};
			}
			my $p = $db->{$_};
			_patch($cp, {v => $q->{c},
				     db => $p->{c},
				     d => $r . '/'});
			set($f, $p) if not $p->{owner} and $cp->{wet};
			$p->{owner}{$cp->{oid}} = $cp->{ts};
		} else {
			if (-e $f) {
				say c(YY, "$f already exists.");
				unlink $f or die c(RR, "Failed to unlink $f.") if $cp->{wet};
			}
			if ($cp->{wet}) {
				if ($t == S_IFREG) {
					if ($q->{hl}) {
						my $g = $cp->{root} . $q->{hl};
						link $g, $f or die "unable to hard link $f to $g: $!";
					} else {
						wf($f, delete $q->{c});
						set($f, $q);
					}
				} else {
					# That's really nasty...
					symlink my $g = $q->{sl}, $f or die "unable to symlink $f to $q->{sl}: $!.";
					# symlink(7) explicitly says the permission of a symbolic link can't be changed(on Linux).
					lchown($f, @$q{qw/uid gid/}) and utimensat($f, $q->{mtime}) or die "$f: $!";
				}
			}
			# A new hash is required here and above since metadata varies for non-directory.
			my $p = $db->{$_} = {owner => $db->{$_}{owner},
					     %$q{grep { $_ ne 'c' } keys %$q}};
			$p->{owner}{current} = $cp->{oid}, $p->{owner}{record}{$cp->{oid}} = $cp->{ts};
		}
	}
}
# merge two patch trees, the first one takes higher priority.
sub merge {
	my ($p, $q) = @_;
	for (keys %$q) {
		if (not $p->{$_}) {
			$p->{$_} = $q->{$_};
		} else {
			my ($t, $_t) = ($p->{$_}{mode} & S_IFMT, $q->{$_}{mode} & S_IFMT);
			if ($t == S_IFDIR xor $_t == S_IFDIR)	{ ... }
			elsif ($t == S_IFDIR)			{ merge($p->{$_}{c}, $q->{$_}{c}) }
		}
	}
}
# merge two patch trees, the second one takes higher priority.
sub merge2 {
	my ($p, $q) = @_;
	for my $k (keys %$q) {
		if (not $p->{$k}) {
			$p->{$k} = $q->{$k};
		} else {
			my ($t, $_t) = map { $_->{$k}{mode} & S_IFMT } $p, $q;
			if ($t == S_IFDIR xor $_t == S_IFDIR)	{ ... }
			elsif ($t == S_IFDIR)			{ merge2(map { $_->{$k}{c} } $p, $q) }
			else					{ $p->{$k} = $q->{$k} }
		}
	}
}
# add path r from v to p.
sub grow {
	my ($p, $v, $r) = @_;
	my @d = split m|/|, $r;
	my $f = pop @d;
	for (@d) {
		$p->{$_} = {%{$v->{$_}},
			    c => {}} if not $p->{$_};
		$p = $p->{$_}{c}, $v = $v->{$_}{c};
	}
	$p->{$f} = $v->{$f};
}
sub rm {
	my ($cp, $vp) = @_;
	my $db = $vp->{db};
	for (keys %$db) {
		my ($r, $p, $o) = ($vp->{d} . $_, $db->{$_}, $db->{$_}{owner});
		my $f = $cp->{root} . $r;
		if ($p->{c}) {
			if ($o->{$cp->{oid}}) {
				rm($cp, {db => $p->{c},
					 d => $r . '/'});
				delete $o->{$cp->{oid}};
				if (not %$o) {
					rmdir $f or warn "unable to rmdir $f: $!." if $cp->{hard};
					delete $db->{$_};
				}
			}
		} else {
			my $d = $o->{record};
			if (delete $d->{$cp->{oid}}) {
				if ($o->{current} eq $cp->{oid}) {
					unlink $f or warn "unable to unlink $f: $!." if $cp->{hard};
					if (%$d) {
						if ($cp->{hard}) {
							my $oid = reduce { $d->{$b} > $d->{$a} ? $b : $a } keys %$d;
							my $p = $cp->{patch}{$oid} ||= {v => rs_parse($cp->{pool} . $oid . '.rs'),
											p => {}};
							grow(@$p{qw/p v/}, $r);
						} else {
							# %$p{qw/owner mode/}.
							delete @$p{grep { !/owner|mode/ } keys %$p};
						}
					} else {
						delete $db->{$_};
					}
				}
			}
		}
	}
}
sub runas {
	my $u = shift;
	if ($u ne 'root') {
		my ($uid, $gid) = (getpwnam $u)[2, 3];
		($(, $)) = ($gid, "$gid $gid");
		($<, $>) = ($uid, $uid);
	} else {
		($<, $>) = (0, 0);
		($(, $)) = (0, '0 0');
	}
}
sub _crowded {
	my $oid = shift;
	{subr => sub {
		my $o = shift;
		if ($o->{event} eq 'ent') {
			my $db = $o->{db};
			if ($db->{c}) {
				$oid ? $db->{owner}{$oid} : 1;
			} else {
				my $rec = $db->{owner}{record};
				keys %$rec > 1 if not $oid or $rec->{$oid};
			}
		}
	 }, prophet => 0};
}
sub _tag {
	my $oid = shift;
	{subr => sub {
		my $o = shift;
		if ($o->{event} eq 'ent') {
			my $db = $o->{db};
			$db->{c} ? $db->{owner}{$oid} : $db->{owner}{record}{$oid};
		}
	 }, prophet => 1};
}
sub _list {
	my $v = {};
	{subr => sub {
		my $o = shift;
		if ($o->{event} eq 'ent') {
			my $db = $o->{db};
			add($v, $db->{c} ? %{$db->{owner}} : %{$db->{owner}{record}});
		} elsif ($o->{event} eq 'ret') {
			$v = [map { [$_, ''.localtime $v->{$_} ] } sort { $v->{$b} <=> $v->{$a} } keys %$v];
		}
	 }, prophet => 0};
}
sub _equals {
	my ($oid, $v, @dir) = (shift, {});
	{subr => sub {
		my $o = shift;
		my $db = $o->{db};
		if ($o->{event} eq 'ent') {
			if (not $oid or $db->{c} ? $db->{owner}{$oid} : $db->{owner}{current} eq $oid) {
				if (my $hl = $db->{hl}) {
					my $r = join '/', @dir, $o->{ent};
					push @{$v->{$hl}}, $r;
				} elsif ($o->{db}{c}) {
					push @dir, $o->{ent};
				}
			}
		} else {
			pop @dir;
			$v if not @dir;
		}
	 }, prophet => 0};
}
sub _rename {
	my ($from, $to) = @_;
	{subr => sub {
		my $o = shift;
		if ($o->{event} eq 'ent') {
			my $db = $o->{db};
			my $owner = $db->{owner};
			if ($db->{c}) {
				$owner->{$to} = delete $owner->{$from} if $owner->{$from};
			} else {
				my $rec = $owner->{record};
				if ($rec->{$from}) {
					$owner->{current} = $to if $owner->{current} eq $from;
					$rec->{$to} = delete $rec->{$from};
				}
			}
		}
	 }, prophet => 1};
}
sub filter {
	my ($cp, $vp) = @_;
	my ($v, $f, $db, $d) = ({}, $cp->{f}{subr}, @$vp{qw/db d/});
	say {$cp->{sink}} $d if $cp->{f}{prophet};
	for (sort keys %$db) {
		my ($p, $r) = ($db->{$_}, $d . $_);
		if ($f->({event => 'ent',
			  ent => $_,
			  db => $p})) {
			say {$cp->{sink}} $r unless $p->{c};
			if ($p->{c}) {
				my $c = filter($cp, {db => $p->{c},
						     d => $r . '/'});
				$v->{$_} = {%$p,
					    c => $c} if %$c or $cp->{f}{prophet};
			} else {
				$v->{$_} = $p;
			}
		}
	}
	$f->({event => 'ret'}) or $v;
}
sub confirm ($) {
	state $s = c(GG, 'yes') . ' or ' .
	    c(RR, 'no') . ': ';
	print shift, ', ', $s;
	while (1) {
		chomp(my $a = <STDIN>);
		return 1 if $a eq 'yes';
		return 0 if $a eq 'no';
		print "Please answer $s";
	}
}
sub rs_unparse_wrap {
	my $o = shift;
	print c(YY, "Writing $o->{d}"), ': ';
	rs_unparse(@$o{qw/v fd/});
	say c(GG, 'done'), '.';
}
sub depdiff {
	my ($p, $q) = @_;
	my %h = map { $_->{module} => 1 } @$q;
	grep { not $h{$_} } map { $_->{module} } @$p;
}
sub Nrev {
	my $n = shift;
	$n =~ s/-/::/g or $n =~ s/::/-/g;
	$n;
}
{ select STDERR;
  local $| = 1;
  my $s;
  { my $H = $ENV{HOME};
    my $P = "$H/.rs";
    $s = {db => "$P/db.rs",
	  root => "$H/CPAN/",
	  pool => "$P/pool/",
	  refdb => "$P/refdb.json",
	  'compile-in' => getcwd()};
    my $cmdline = arg_parse();
    my $profile = do($cmdline->{profile} || "$H/.rs.profile") || {};
    add($s, %$profile, %$cmdline);
    s|(?<=[^/])$|/|	for $s->{pool}, $s->{root};
    s|/$||		for $s->{prefix} ||= $s->{root} }
  print 'run-time config: ', jw($s);
  { my $p = $s->{https} ? 'https' : 'http';
    sub Rmodinfo {
	    purl({method => 'GET',
		  json => 1,
		  url => "$p://fastapi.metacpan.org/v1/release/" . Nrev(shift)});
    }
    sub Vmodinfo {
	    purl({method => 'POST',
		  json => 1,
		  url => "$p://fastapi.metacpan.org/v1/release/_search",
		  'post-data' => jw({query => {term => {provides => shift}},
				     filter => {term => {status => 'latest'}}})});
    } }
  sub fuse {
	  my $root;
	  { my $v = {};
	    { my $c;
	      { my $db = {};
		{ my @l;
		  { my $d = shift;
		    @l = -f $d ? $d : groupof($d) }
		  for (@l) {
			  my $t = rs_parse($_);
			  merge2($v, $t);
			  _patch({root => "\0",
				  oid => m|([^/]*).rs$|,
				  wet => 0,
				  ts => time}, {v => $t,
						db => $db,
						d => ''});
		  } }
		my $fh = tempfile();
		rs_unparse($db, fileno $fh);
		seek $fh, 0, 0 or die $!;
		local $/;
		$c = <$fh> }
	      $v->{'db.rs'} = {mode => S_IFREG | 0664,
			       c => $c,
			       size => length $c,
			       map { $_ => 0 } qw/uid gid mtime/} }
	    $root = {mode => S_IFDIR | 0775,
		     c => $v,
		     map { $_ => 0 } qw/uid gid mtime/} }
	  fuse_main({root => $root,
		     args => \@_,
		     follow => sub {
			     my $p = $root;
			     $p = $p->{c}{$_} for split m|/|, shift;
			     $p;
		     }});
  }
  # mod tells us whether the database is modified.
  my ($db, $mod);
  sub strip {
	  my ($f, $m, $root) = @_;
	  my $o;
	  if (/\.[ao]$/)					{ @$o{qw/strip archive/} = (1, 1) }
	  elsif ((/\.so/ or $m->{mode} & 0111) and elf($f))	{ $o->{strip} = 1 }
	  if ($o->{strip}) {
		  xsh(0, my $exe = $s->{strip} || 'strip',
		      $o->{archive} ? '--strip-unneeded' : (), $f);
		  say "$exe on $f, st: $?.";
		  if (not $?) {
			  set($f, $m);
			  $m->{size} = (stat $f)[7];
		  }
	  }
  }
  sub diff {
	  my $oid = shift;
	  make_path($s->{pool}) unless -d $s->{pool};
	  my ($p, $_v) = $s->{pool} . $oid . '.rs';
	  if (-e $p and not $s->{dry}) {
		  say "$p exists, will merge with newly generated patch tree.";
		  $_v = rs_parse($p);
	  }
	  my $v = _diff({ih => {},
			 %$s{qw/root relink/},
			 root => $s->{root},
			 oid => $oid,
			 wet => !$s->{dry} || $s->{'strip-anyway'},
			 ts => time}, {db => $db,
				       ign => $s->{ign} ? do $s->{ign} || die "$s->{ign} is bad.\n" : undef,
				       d => ''});
	  if ($s->{dry}) {
		  tag($oid);
	  } else {
		  $mod = 1;
		  merge($v, $_v) if $_v;
		  rs_unparse_wrap({v => $v,
				   fd => fileno wf($p),
				   d => "compiled package $p"});
	  }
  }
  sub reset {
	  local $s->{dry} = 1;
	  diff('');
	  remove('');
	  # should be empty.
	  diff('');
	  $mod = 0;
  }
  sub patch {
	  for my $f (@_) {
		  #   v is the parsed value of the patch, and can be cut using subtree switch,
		  # the final patch to apply is stored in p.
		  my $v = my $p = rs_parse($f);
		  if (exists $s->{subtree}) {
			  die c(RR, 'You cannot use subtree with multiple patches.') if @_ > 1;
			  $p = {};
			  grow($p, $v, $_) for flatten($s->{subtree});
		  }
		  my ($oid) = $f =~ m|([^/]*).rs$|;
		  print c(YY, "Patching $f, oid of which is $oid: ");
		  _patch({root => $s->{root},
			  oid => $oid,
			  wet => !$s->{dry},
			  ts => time}, {v => $p,
					db => $db,
					d => ''});
		  say c(GG, 'done'), '.';
		  $mod = 1 unless $s->{dry};
	  }
  }
  sub remove {
	  my $oid = shift;
	  rm({root => $s->{root},
	      oid => $oid,
	      hard => !$s->{soft},
	      pool => $s->{pool},
	      patch => my $p = {}}, {db => $db,
				     d => ''});
	  $mod = 1;
	  my $ts = time;
	  for (keys %$p) {
		  $s->{soft} and die;
		  _patch({root => $s->{root},
			  oid => $_,
			  wet => !$s->{soft},
			  ts => $ts}, {v => $p->{$_}{p},
				       db => $db,
				       d => ''});
	  }
  }
  sub compile {
	  my $root;
	  if ($root = not $>) {
		  # drop root privilege before compile, as suggested by many packages.
		  my $u = $s->{'compile-as'} || $ENV{USER};
		  if ($u eq 'root') {
			  say c(RR, 'You are compiling as root!');
			  $root = 0;
		  } else {
			  runas($u);
		  }
	  }
	  my ($p, $o, $oid, $pkg, $d) = (abs_path(shift), getcwd());
	  chdir $s->{'compile-in'} or die $!;
	  if (-d $p) {
		  $oid = shift;
		  if ($s->{prepared}) {
			  $d = $p;
		  } else {
			  mkdir $d = $oid or die $!;
			  xsh(0, qw/git clone --shared/, '--branch=' . ($s->{branch} || $oid),
			      $p, $d);
		  }
	  } else {
		  ($oid) = $p =~ m{([^/]*).(tar.\w+|tgz)$};
		  ($d) = (xsh(1, qw/tar -xvf/, $p))[0] =~ m|([^/\n]*)| or die 'bad tarball.';
	  }
	  ($pkg) = $s->{package} || $oid =~ m|(.*)-|;
	  chdir $d or die "chdir $d: $!.";
	  my $b = do {
		  if ($s->{cpan}) {
			  if (-f 'Makefile.PL') {
				  {'pre-configure' => "perl Makefile.PL INSTALL_BASE=$s->{prefix} NO_PERLLOCAL=1 NO_PACKLIST=1",
				   'no-configure' => 1,
				   'post-make' => 'make test'};
			  } elsif (-f 'Build.PL') {
				  {'pre-configure' => "perl Build.PL",
				       'no-configure' => 1,
				       'post-configure' => './Build',
				       'no-make' => 1,
				       'post-make' => './Build test',
				       'no-make-install' => 1,
				       'post-make-install' => "./Build install --install_base=$s->{prefix}"};
			  } else {
				  die c(RR, 'Neither Makefile.PL nor Build.PL found.');
			  }
		  } else {
			  my ($b, $v) = (do $s->{build}, $pkg);
			  $b = $b->($s) if ref $b eq 'CODE';
			  $v = $b->{$v} until ref $v or not $v;
			  $v;
		  }
	  };
	  xsh({'feed-stdin' => 1}, $b->{'pre-configure'}, 'bash') or die 'pre-configure failed.' if $b->{'pre-configure'};
	  unless ($b->{'no-configure'}) {
		  local %ENV = %ENV;
		  xsh(0, qw/autoreconf -iv/) or die 'autoreconf failed.' unless -e 'configure';
		  my @p = "--prefix=$s->{prefix}";
		  my $e = $b->{environment};
		  $ENV{$_} = $e->{$_} for keys %$e;
		  xsh(0, './configure', @{$b->{switch}}, @p,
		      {to => *STDERR,
		       from => *STDOUT,
		       mode => '>'}, qw/| less --quit-on-intr --RAW-CONTROL-CHARS/) or die 'configure failed.';
	  } elsif ($s->{cpan}) {
		  my $p = jr(rf('MYMETA.json'))->{prereqs};
		  my @d = map { pairmap { {phase => $_,
					   relationship => 'requires',
					   module => $a,
					   version => our $b} } %{$p->{$_}{requires} || {}} } qw/build test runtime/;
		  _install($_) for @d;
		  push our @D, +@d;
	  }
	  xsh({'feed-stdin' => 1}, $b->{'post-configure'}, 'bash') or die 'post-configure failed.' if $b->{'post-configure'};
	  xsh(0, 'make', $s->{jobs} ? "--jobs=$s->{jobs}" : (), @{$b->{'make-parameter'}}) or die 'make failed.' unless $b->{'no-make'};
	  xsh({'feed-stdin' => 1}, $b->{'post-make'}, 'bash') or die 'post-make failed.' if $b->{'post-make'};
	  # since the following is installation process we need to switch back to root.
	  runas('root') if $root;
	  xsh(0, qw/make install/, @{$b->{'make-install-parameter'}}) or die 'make install failed.' unless $b->{'no-make-install'};
	  xsh({'feed-stdin' => 1}, $b->{'post-make-install'}, 'bash') or die 'post-make failed.' if $b->{'post-make-install'};
	  # do some cleaning.
	  unless ($s->{prepared} or $s->{'no-rm'}) {
		  my $cwd = getcwd();
		  xsh(0, qw/rm -rf/, "../$d") if $s->{rm} or confirm "'rm -rf ../$d' on $cwd";
	  }
	  # return to where we started.
	  chdir $o or die "chdir $o: $!.";
	  # the next steps.
	  diff($oid);
	  tag($oid) unless $s->{cpan};
  }
  sub group {
	  patch($_) for &groupof;
  }
  sub groupof {
	  my $group = do $s->{group} or die $@ || $!;
	  my @l;
	  for ($group->{+shift}($s)) {
		  print 'Searching for ', c(Y, $_), ' in pool: ';
		  my @pkg = glob "$s->{pool}$_*rs";
		  die c(RR, 'not found'), "!\n" unless @pkg;
		  my $i;
		  if (@pkg > 1) {
			  say c(YY, 'there are multiple choices'), '.';
			  do {
				  say join "\n", map { "$_: $pkg[$_]" } 0..$#pkg;
				  chomp($i = <STDIN>);
			  } until looks_like_number($i) and $i >= 0 and $i < @pkg;
		  } else {
			  $i = 0;
		  }
		  say 'using ', c(YY, $pkg[$i]), '.';
		  push @l, $pkg[$i];
	  }
	  @l;
  }
  sub _which {
	  my $r = shift;
	  if ($r =~ m{^/}) {
		  die c(RR, "Absolute path $r not prefixed by $s->{root}"), ".\n" unless 0 == index $r, $s->{root};
		  $r = substr $r, length $s->{root};
	  }
	  my ($d, @p) = (0, split m{/}, $r);
	  {subr => sub {
		  my $o = shift;
		  if ($o->{event} eq 'ent') {
			  my $u = $d >= @p || $o->{ent} eq $p[$d];
			  $d += 1 if $u and $o->{db}{c};
			  $u;
		  } elsif ($o->{event} eq 'ret') {
			  $d -= 1, 0;
		  }
	   }, prophet => 1};
  }
  for my $f (qw/tag crowded list which rename equals/) {
	  no strict 'refs';
	  *$f = $s->{'no-pager'} ? sub {
		  filter({sink => *STDOUT,
			  f => &{$::{"_$f"}}}, {db => $db,
						d => ''});
	  } : sub {
		  my $pid;
		  local $SIG{PIPE} = 'IGNORE';
		  { pipe my $r, my $w or die $!;
		    $pid = xsh({asynchronous => 1},
			       qw/less -R/, {to => *STDIN,
					     from => $r,
					     mode => '<'});
		    close $r;
		    print $w jw(filter({sink => $w,
					f => &{$::{"_$f"}}}, {db => $db,
							      d => ''})) }
		  # we must wait here or we will lose control-terminal.
		  waitpid $pid, 0;
		  $mod = 1 if $f eq 'rename';
	  };
  }
  { my $refdb;
    sub _RR () { $refdb = -f $s->{refdb} ? jr(rf($s->{refdb})) : {} }
    sub _RW () {
	    print c(YY, "Writing reference counting database $s->{refdb}", ': ');
	    wf($s->{refdb}, jw($refdb));
	    say c(GG, 'done'), '.';
    }
    sub _install {
	    my $o = shift;
	    print "Satisfying: ", jw($o);
	    my $q = $refdb->{$o->{module}} ||= {};
	    my ($A, $L) = ($q->{current},
			   $s->{latest});
	    if ($A)	{ return if not $L and vcmp($A->{version}, $o->{version}) >= 0 }
	    # no update on CORE module even when latest is required.
	    else	{ return if vsat(@$o{qw/module version/}) }
	    my ($t, $B, $j, $V) = first {
		    vcmp($_->{version}, $o->{version}) >= 0
	    } @{$q->{available} ||= []};
	    if (not $L and $t) {
		    $B = $t;
		    print "Available: ", jw($B);
	    } else {
		    say 'Getting module info from metacpan...';
		    $j = Rmodinfo($o->{module});
		    if (eval { $j->{code} == 404 }) {
			    $j = Vmodinfo($o->{module});
			    my @r = map { $_->{_source} } @{$j->{hits}{hits}};
			    if (@r < 1)		{ die c(RR, "Nothing provides $o->{module}.") }
			    elsif (@r > 1)	{ say c(YY, "Multiple modules provides $o->{module}: ",
							join ', ', map { $_->{distribution} } @r) }
			    my $k = $r[0];
			    say c(YY, "Using $k->{name} for $o->{module}.");
			    my $v = $k->{version};
			    $j = {name => Nrev($o->{module}) . "-$v",
				  version => $v,
				  dependency => [{module => Nrev($k->{distribution}),
						  version => $v,
						  phase => 'configure',
						  relationship => 'requires'}]};
			    $V = 1;
		    }
		    say "Latest version: $j->{version}.";
		    return if $A and $A->{version} eq $j->{version};
		    $q->{dependency}{$j->{version}} = [grep { $_->{phase} eq 'configure' and $_->{relationship} eq 'requires' }
						       @{$j->{dependency}}];
		    $B = {slice($j, qw/name version/)};
	    }
	    local *D = $q->{dependency}{$B->{version}};
	    _install($_) for our @D;
	    remove($A->{name}) if $A;
	    if (-f(my $f = "$s->{pool}$B->{name}.rs")) {
		    say c(YY, "Reusing compiled package $f.");
		    patch($f);
	    } elsif (not $V) {
		    if (-f($f = "$s->{'compile-in'}/$j->{archive}")) {
			    say c(YY, "Reusing source archive $f.");
		    } else {
			    $j->{download_url} =~ s|(?<=^http)s(?=://)|| unless $s->{https};
			    say "Downloading $j->{download_url} @ $j->{date}...";
			    purl({method => 'GET',
				  url => $j->{download_url},
				  save => $f});
		    }
		    compile($f);
		    unshift @{$q->{available}}, $B;
	    }
	    if ($A) {
		    _uninstall({to => $_,
				from => $o->{module}}) for depdiff($q->{dependency}{$A->{version}},
								   \@D);
	    }
	    $q->{current} = $B;
	    $refdb->{$_->{module}}{referent}{$o->{module}} = $_->{version} for @D;
    }
    { my $l;
      sub _lib () {
	      my @p = split ':', $ENV{PERL5LIB} || '';
	      my $b = "$s->{prefix}/lib/perl5";
	      if (none { $b eq s|/$||r } @p) {
		      $ENV{PERL5LIB} = $l = join ':', @p, $b;
		      say 'PERL5LIB set to: ', c(YY, $l), '.';
	      }
      }
      sub install {
	      _RR;
	      _lib;
	      @$s{qw/cpan rm/} = (1, 1);
	      _install({module => my $module = shift,
			version => $s->{version} || 0,
			phase => 'runtime',
			relationship => 'requires'});
	      $refdb->{$module}{direct} = 1;
	      _RW;
	      say 'Please set your PERL5LIB environment to ',
		  c(CC, $l), ' to use the installed modules.' if $l;
      } }
    sub _uninstall {
	    my $o = shift;
	    my $q = $refdb->{$o->{to}};
	    delete $q->{referent}{$o->{from}};
	    return unless $q->{current};
	    unless (%{$q->{referent}} or $q->{direct}) {
		    for (@{$q->{dependency}{$q->{current}{version}}}) {
			    _uninstall({to => $_->{module},
					from => $o->{to}});
		    }
		    remove($q->{current}{name});
		    delete $q->{current};
	    }
    }
    sub uninstall {
	    _RR;
	    my $q = $refdb->{my $module = shift};
	    die c(RR, "$module not installed or directly referenced by you."),
		unless $q->{current} and $q->{direct};
	    delete $q->{direct};
	    _uninstall({to => $module,
			from => ''});
	    _RW;
    }
    sub direct {
	    _RR;
	    print jw([map { [$_, $refdb->{$_}{current}{version}] }
		      grep { $refdb->{$_}{direct} } keys %$refdb]);
    }
    sub _orphan {
	    _RR;
	    [grep { my $q = $refdb->{$_};
		    my $r = $q->{referent};
		    not ($q->{direct} or $r and %$r) } keys %$refdb];
    }
    sub orphan { print jw(_orphan()) }
    sub adopt {
	    for (@{_orphan()}) {
		    my $q = $refdb->{$_};
		    my $A = $q->{available} ||= [];
		    say 'There are ', c(YY, 0+@$A), " available versions of orphan $_.";
		    for (@$A) {
			    $_ = "$s->{pool}$_->{name}.rs";
			    if (-f) {
				    if (unlink)	{ say c(GG, "$_ removed.") }
				    else	{ say c(RR, "removing $_ failed.") }
			    } else {
				    say c(M, "$_ doesn't exist.");
			    }
		    }
		    delete $refdb->{$_};
	    }
	    _RW;
    } }
  { my $cmd = shift;
    $db = -f $s->{db} ? rs_parse($s->{db}) : {} if $cmd ne 'fuse';
    $::{$cmd}(@ARGV) }
  if ($mod)	{ rs_unparse_wrap({v => $db,
				   fd => fileno wf($s->{db}),
				   d => "database $s->{db}"}) }
  else		{ say c(G, 'Database not touched'), '.' } }
